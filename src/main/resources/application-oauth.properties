#registration
spring.security.oauth2.client.registration.naver.client-id=s8u6D17XJ8TsJICxEKnQ
spring.security.oauth2.client.registration.naver.client-secret=oQk7N1TrkO
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization_grant_type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
spring.security.oauth2.client.registration.naver.client-name=Naver
#provider
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user_name_attribute=response





spring.security.oauth2.client.registration.google.client-id=652535695920-8j5457iia1t76g0kjc7d910e4br10ffj.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=profile,email
# the profile and email scope is default values, but the reason for doing that above is
# because of openid which makes to recognize as "Open Id Provider"
# In that case, you have to make separate OAuth2Service from "OpenId Provider" service(Google)
# to None "OpenId Provider" service(naver, kakao)
# So, in order to use just one OAuth2Service, intentionally drop "openid scope" when register.